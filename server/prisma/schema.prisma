// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("db_url")
}

enum RoomType {
  PUBLIC
  PROTECTED
  PRIVATE
}

model user {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String   @unique
  login          String   @unique
  username       String   @unique
  fullName       String
  auth2faOn      Boolean? @default(false)
  auth2faSercret String?
  lastSeen       String
  avatar         String?

  ownedRooms   ChatRoom[]
  memberRooms  RoomMembers[]
  mutedInRooms RoomMute[]

  sent_friendship     Friendship[] @relation("SentFriendShip")
  recieved_friendship Friendship[] @relation("RecievedFriendShip")
}

model ChatRoom {
  id         Int      @id @unique @default(autoincrement())
  name       String   @unique()
  owner      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  password   String?
  roomType   RoomType @default(PUBLIC)

  ownerRef       user          @relation(fields: [owner], references: [id])
  membersRef     RoomMembers[]
  mutedUserRef   RoomMute[]
}

model RoomMembers {
  id           Int     @id @unique @default(autoincrement())
  userId       Int
  roomId       Int
  userBanned   Boolean @default(false)
  isAdmin      Boolean @default(false)

  user user     @relation(fields: [userId], references: [id])
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model RoomMute {
  id           Int      @id @unique @default(autoincrement())
  muted_at     DateTime @default(now())
  muteDuration BigInt   // mute duration on minutes
  userId       Int
  roomId       Int
  user         user     @relation(fields: [userId], references: [id])
  room         ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Friendship {
  friendship_id Int    @unique @default(autoincrement())
  user_id       Int
  friend_id     Int
  status        String @default("pending")

  friend user @relation("RecievedFriendShip", fields: [friend_id], references: [id])
  user   user @relation("SentFriendShip", fields: [user_id], references: [id])

  @@unique([user_id, friend_id])
}
