// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("db_url")
}

enum RoomType {
  PUBLIC
  PROTECTED
  PRIVATE
}

model user {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email          String   @unique
  login          String   @unique
  username       String   @unique
  fullName       String
  auth2faOn      Boolean? @default(false)
  auth2faSercret String?
  lastSeen       String
  avatar         String?

  ownedRooms  ChatRoom[]
  memberRooms RoomMembers[]
  bannedRooms RoomBan[]
  messages    Messages[]
  //mutedInRooms RoomMute[]

  sent_friendship     Friendship[] @relation("SentFriendShip")
  recieved_friendship Friendship[] @relation("RecievedFriendShip")
  user_chats UserChats[] @relation("UserChats")
}

model ChatRoom {
  id         Int      @id @unique @default(autoincrement())
  name       String   @unique()
  owner      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  password   String?
  roomType   RoomType @default(PUBLIC)

  ownerRef   user          @relation(fields: [owner], references: [id])
  membersRef RoomMembers[]
  bannedUsers RoomBan[]
  messages   Messages[]
  //mutedUserRef   RoomMute[]
}

model Messages {
  id         Int      @id @unique @default(autoincrement())
  sender_id  Int
  //sender_username String
  created_at DateTime @default(now())
  message    String

  // message is either sent to user or a room
  recepient_id Int?
  chatRom_id   Int?

  recepient user?     @relation(fields: [recepient_id], references: [id])
  chatroom  ChatRoom? @relation(fields: [chatRom_id], references: [id])
}

model UserChats {
  id Int @id @unique @default(autoincrement())
  user_id Int
  recepient_id Int

  dest user  @relation(fields: [recepient_id], references: [id], "UserChats")
  @@unique([user_id, recepient_id])
}

model RoomBan {
  id Int @id @unique @default(autoincrement())
  user_id Int
  room_id Int 

  banned_user user @relation(fields: [user_id], references: [id])
  chat_room   ChatRoom @relation(fields: [room_id], references: [id])
  @@unique([user_id, room_id])
}
model RoomMembers {
  id          Int     @id @unique @default(autoincrement())
  userId      Int
  roomId      Int
  isAdmin     Boolean @default(false)
  inChat      Boolean @default(false)
  mutedUntile BigInt?
  isBanned Boolean @default(false)

  user user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Friendship {
  friendship_id Int    @unique @default(autoincrement())
  user_id       Int
  friend_id     Int
  status        String @default("pending")

  friend user @relation("RecievedFriendShip", fields: [friend_id], references: [id])
  user   user @relation("SentFriendShip", fields: [user_id], references: [id])

  @@unique([user_id, friend_id])
}

model Game {
  id             Int @id @unique @default(autoincrement())
  firtPlayer_id  Int
  secondPlayer   Int
  user_score     Int
  opponent_score Int
  startedAt	 DateTime @db.Date
}
